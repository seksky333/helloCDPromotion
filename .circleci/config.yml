# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
#update

jobs:
  create_and_deploy_front_end: #job name
    docker: # it uses the docker executor
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: deploy cloudfront
          #echo environment variable
          command: |
            aws cloudformation deploy --template-file bucket.yml --stack-name "chez-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides NAME="chez-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://"chez-${CIRCLE_WORKFLOW_ID:0:7}" --delete

  get_last_deployment_id: #job name
    docker: # it uses the docker executor
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar
      - run: yum install -y gzip
      - run:
          name: get last deployment id
          #echo environment variable
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/deployment_id.txt
      - run: cat ~/deployment_id.txt
      - run:
          name: get last deployment stack name
          #echo environment variable
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`StackName\`].Value" \
            --no-paginate --output text > ~/stack_name.txt
      - run: cat ~/stack_name.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - deployment_id.txt
            - stack_name.txt

  promote_to_production: #job name
    docker: # it uses the docker executor
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar
      - run: yum install -y gzip
      - attach_workspace:
          at: ~/
      - run:
          name: promote to production
          #echo environment variable
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="chez-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end: #job name
    docker: # it uses the docker executor
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar
      - run: yum install -y gzip
      - attach_workspace:
          at: ~/
      - run: cat ~/deployment_id.txt
      - run: cat ~/stack_name.txt
      - run: OldPipelineID=$(cat ~/deployment_id.txt)
      - run: echo $OldPipelineID
      - run: PreviousStackName=$(cat ~/stack_name.txt)
      - run: echo $PreviousStackName
      - run: aws s3 rm s3://$OldPipelineID --recursive
      - run: aws cloudformation delete-stack --stack-name $PreviousStackName

  save_hello_world_output: #job name
    docker: # it uses the docker executor
      - image: amazon/aws-cli
    steps:
      - run: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  print_output_file:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: echo "hello world" > ~/output.txt
      - run: cat ~/output.txt
      - run: cp ~/output.txt output.txt
      - run: cat output.txt
      - run: export OldPipelineID=$(cat output.txt)
      - run: echo $OldPipelineID
      - run: echo "$OldPipelineID"
      - run: echo "${OldPipelineID}"

workflows:
  # workflow
  my_workflow:
    jobs:
      # - create_and_deploy_front_end
      # - get_last_deployment_id:
      #     requires:
      #       - create_and_deploy_front_end
      # - promote_to_production:
      #     requires:
      #       - get_last_deployment_id
      # - clean_up_old_front_end:
      #     requires:
      #       - promote_to_production
      # - save_hello_world_output
      - print_output_file
      #     requires:
      #       - save_hello_world_output
